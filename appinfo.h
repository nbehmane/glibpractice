/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __APPINFO_H__
#define __APPINFO_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for ti.example.AppInfo */

#define TYPE_APP_INFO (app_info_get_type ())
#define APP_INFO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP_INFO, AppInfo))
#define IS_APP_INFO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP_INFO))
#define APP_INFO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_APP_INFO, AppInfoIface))

struct _AppInfo;
typedef struct _AppInfo AppInfo;
typedef struct _AppInfoIface AppInfoIface;

struct _AppInfoIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_version) (
    AppInfo *object,
    GDBusMethodInvocation *invocation);

};

GType app_info_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *app_info_interface_info (void);
guint app_info_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void app_info_complete_version (
    AppInfo *object,
    GDBusMethodInvocation *invocation,
    const gchar *version,
    const gchar *description);



/* D-Bus method calls: */
void app_info_call_version (
    AppInfo *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean app_info_call_version_finish (
    AppInfo *proxy,
    gchar **out_version,
    gchar **out_description,
    GAsyncResult *res,
    GError **error);

gboolean app_info_call_version_sync (
    AppInfo *proxy,
    gchar **out_version,
    gchar **out_description,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_APP_INFO_PROXY (app_info_proxy_get_type ())
#define APP_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP_INFO_PROXY, AppInfoProxy))
#define APP_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_APP_INFO_PROXY, AppInfoProxyClass))
#define APP_INFO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_APP_INFO_PROXY, AppInfoProxyClass))
#define IS_APP_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP_INFO_PROXY))
#define IS_APP_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_APP_INFO_PROXY))

typedef struct _AppInfoProxy AppInfoProxy;
typedef struct _AppInfoProxyClass AppInfoProxyClass;
typedef struct _AppInfoProxyPrivate AppInfoProxyPrivate;

struct _AppInfoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AppInfoProxyPrivate *priv;
};

struct _AppInfoProxyClass
{
  GDBusProxyClass parent_class;
};

GType app_info_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AppInfoProxy, g_object_unref)
#endif

void app_info_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AppInfo *app_info_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AppInfo *app_info_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void app_info_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AppInfo *app_info_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AppInfo *app_info_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_APP_INFO_SKELETON (app_info_skeleton_get_type ())
#define APP_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP_INFO_SKELETON, AppInfoSkeleton))
#define APP_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_APP_INFO_SKELETON, AppInfoSkeletonClass))
#define APP_INFO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_APP_INFO_SKELETON, AppInfoSkeletonClass))
#define IS_APP_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP_INFO_SKELETON))
#define IS_APP_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_APP_INFO_SKELETON))

typedef struct _AppInfoSkeleton AppInfoSkeleton;
typedef struct _AppInfoSkeletonClass AppInfoSkeletonClass;
typedef struct _AppInfoSkeletonPrivate AppInfoSkeletonPrivate;

struct _AppInfoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AppInfoSkeletonPrivate *priv;
};

struct _AppInfoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType app_info_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AppInfoSkeleton, g_object_unref)
#endif

AppInfo *app_info_skeleton_new (void);


G_END_DECLS

#endif /* __APPINFO_H__ */
