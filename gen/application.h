/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __APPLICATION_H__
#define __APPLICATION_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for ti.example.App */

#define TYPE_APP (app_get_type ())
#define APP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP, App))
#define IS_APP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP))
#define APP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_APP, AppIface))

struct _App;
typedef struct _App App;
typedef struct _AppIface AppIface;

struct _AppIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_scan_results) (
    App *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_scan) (
    App *object,
    GDBusMethodInvocation *invocation,
    guint arg_time);

};

GType app_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *app_interface_info (void);
guint app_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void app_complete_scan (
    App *object,
    GDBusMethodInvocation *invocation);

void app_complete_get_scan_results (
    App *object,
    GDBusMethodInvocation *invocation,
    GVariant *results);



/* D-Bus method calls: */
void app_call_scan (
    App *proxy,
    guint arg_time,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean app_call_scan_finish (
    App *proxy,
    GAsyncResult *res,
    GError **error);

gboolean app_call_scan_sync (
    App *proxy,
    guint arg_time,
    GCancellable *cancellable,
    GError **error);

void app_call_get_scan_results (
    App *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean app_call_get_scan_results_finish (
    App *proxy,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean app_call_get_scan_results_sync (
    App *proxy,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_APP_PROXY (app_proxy_get_type ())
#define APP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP_PROXY, AppProxy))
#define APP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_APP_PROXY, AppProxyClass))
#define APP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_APP_PROXY, AppProxyClass))
#define IS_APP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP_PROXY))
#define IS_APP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_APP_PROXY))

typedef struct _AppProxy AppProxy;
typedef struct _AppProxyClass AppProxyClass;
typedef struct _AppProxyPrivate AppProxyPrivate;

struct _AppProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AppProxyPrivate *priv;
};

struct _AppProxyClass
{
  GDBusProxyClass parent_class;
};

GType app_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AppProxy, g_object_unref)
#endif

void app_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
App *app_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
App *app_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void app_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
App *app_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
App *app_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_APP_SKELETON (app_skeleton_get_type ())
#define APP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_APP_SKELETON, AppSkeleton))
#define APP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_APP_SKELETON, AppSkeletonClass))
#define APP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_APP_SKELETON, AppSkeletonClass))
#define IS_APP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_APP_SKELETON))
#define IS_APP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_APP_SKELETON))

typedef struct _AppSkeleton AppSkeleton;
typedef struct _AppSkeletonClass AppSkeletonClass;
typedef struct _AppSkeletonPrivate AppSkeletonPrivate;

struct _AppSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AppSkeletonPrivate *priv;
};

struct _AppSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType app_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AppSkeleton, g_object_unref)
#endif

App *app_skeleton_new (void);


G_END_DECLS

#endif /* __APPLICATION_H__ */
