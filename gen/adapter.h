/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __ADAPTER_H__
#define __ADAPTER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for ti.example.Adapter */

#define TYPE_ADAPTER (adapter_get_type ())
#define ADAPTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER, Adapter))
#define IS_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER))
#define ADAPTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ADAPTER, AdapterIface))

struct _Adapter;
typedef struct _Adapter Adapter;
typedef struct _AdapterIface AdapterIface;

struct _AdapterIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_set_power) (
    Adapter *object,
    GDBusMethodInvocation *invocation,
    guint arg_power);

};

GType adapter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *adapter_interface_info (void);
guint adapter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void adapter_complete_set_power (
    Adapter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void adapter_call_set_power (
    Adapter *proxy,
    guint arg_power,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_set_power_finish (
    Adapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_set_power_sync (
    Adapter *proxy,
    guint arg_power,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ADAPTER_PROXY (adapter_proxy_get_type ())
#define ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER_PROXY, AdapterProxy))
#define ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER_PROXY, AdapterProxyClass))
#define ADAPTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER_PROXY, AdapterProxyClass))
#define IS_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER_PROXY))
#define IS_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER_PROXY))

typedef struct _AdapterProxy AdapterProxy;
typedef struct _AdapterProxyClass AdapterProxyClass;
typedef struct _AdapterProxyPrivate AdapterProxyPrivate;

struct _AdapterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AdapterProxyPrivate *priv;
};

struct _AdapterProxyClass
{
  GDBusProxyClass parent_class;
};

GType adapter_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AdapterProxy, g_object_unref)
#endif

void adapter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter *adapter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter *adapter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void adapter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter *adapter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter *adapter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ADAPTER_SKELETON (adapter_skeleton_get_type ())
#define ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER_SKELETON, AdapterSkeleton))
#define ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER_SKELETON, AdapterSkeletonClass))
#define ADAPTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER_SKELETON, AdapterSkeletonClass))
#define IS_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER_SKELETON))
#define IS_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER_SKELETON))

typedef struct _AdapterSkeleton AdapterSkeleton;
typedef struct _AdapterSkeletonClass AdapterSkeletonClass;
typedef struct _AdapterSkeletonPrivate AdapterSkeletonPrivate;

struct _AdapterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AdapterSkeletonPrivate *priv;
};

struct _AdapterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType adapter_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AdapterSkeleton, g_object_unref)
#endif

Adapter *adapter_skeleton_new (void);


G_END_DECLS

#endif /* __ADAPTER_H__ */
